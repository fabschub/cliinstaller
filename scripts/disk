#!/bin/sh
#
# (C) 2008 Joaquim Boura <x-un-i@sidux.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.
#
#--------------------------------------------------------------------------
# Shell replacement for disk.py
#
# We emulate the different calls for disk.py
# Only option -u needs a parameter.
#
#
#
# exec 2>/dev/null
myName=`basename $0`
#--------------------------------------------------------------
# functions
#--------------------------------------------------------------
usage()
{
	echo ""
	echo "$myName is a temporarly replacement for disk.py"
	echo "Usage: $myName [-d|--disk]|[-p|--partiton]|[-n|--nousb]|[-u <sdX> | --usb=<sdX>]|[-h|--help]"
	echo "-d|--disk                           print all disk devices"
	echo "-p|--partition                      print all partition devices"
	echo "-n|--nousb                          print all disks without usb"
	echo "-u|--usb <device>                   print usb device (-u sdX or --usb=sdX)"
	echo "-h|--help                           print this help"
	echo ""
}
#--------------------------------------------------------------
error()
{
    echo $@
}
#--------------------------------------------------------------

partition_or_volume_info()
{
	local myVar=$1
	local mypar=$2
	udevadm info  --query=all --name=$myVar |\
		fgrep -w -e DEVNAME -e ID_FS_TYPE -e ID_FS_USAGE -e ID_FS_UUID |\
		sed 's#E: ##' |\
		awk -F"=" -v var="$mypar" '{printf "%s,", $2}END{print var}'| \
		awk -F"," '{printf  "%s,%s,%s,%s,%s\n",$1,$3,$4,$2,$5}' |\
		fgrep -v -e "LVM2_member"|fgrep "filesystem"

}

partition_or_volume_info_mapper()
{
	local myVar=$1

	blkid -p -o udev "${myVar}" | \
		fgrep -w -e DEVNAME -e ID_FS_TYPE -e ID_FS_USAGE -e ID_FS_UUID  | \
	 	sed 's#E: ##' |\
		awk -F"=" -v var=lvm -v var2="${myVar}" 'BEGIN{printf var2 ","}{printf "%s,", $2}END{print var}' |\
	   	awk -F"," '{printf  "%s,%s,%s,%s,%s\n",$1,$3,$4,$2,$5}' |\
	    	fgrep -v -e "LVM2_member" |fgrep "filesystem"

}
#--------------------------------------------------------------
parameter_p()
{
	disks=`LANG=C fdisk -l | grep "Disk /dev" | cut -d: -f1 | cut -d" " -f2`
	# parts=`fdisk -l $disk | fgrep -v "Extended" | fgrep '^/dev/' | cut -d " " -f1 | cut -d "/" -f 3`

	for disk in ${disks}
	do
		parts=$(fdisk -l $disk | grep -v "Extended" | \
			grep '^/dev/' | cut -d " " -f1 | cut -d "/" -f 3)
		for part in $parts
		do
			partition_or_volume_info $part norm
		done
	done

	volumes=`ls /dev/mapper/* | fgrep -v "CONTROL"`
	for vol in $volumes
		do
			partition_or_volume_info_mapper $vol
		done
}
#--------------------------------------------------------------
parameter_d()
{
	# Using 2>/dev/null to avoid
	# Disk /dev/dm-0 doesn't contain a valid partition table
	LANG=C fdisk -l 2>/dev/null | grep "Disk /dev" | \
		cut -d: -f1 | cut -d" " -f2 | \
		fgrep -v "/dev/dm"
	#ls  /dev/mapper/* | grep -v control
}
#--------------------------------------------------------------
parameter_n()
{
	# Using 2>/dev/null to avoid
	# Disk /dev/dm-0 doesn't contain a valid partition table
	disks=`LANG=C fdisk -l 2>/dev/null | grep "Disk /dev" |\
	grep -v "/dev/dm" | cut -d: -f1 | cut -d" " -f2`
	for disk in ${disks}; do
		readlink -f /sys/block/${disk##/dev/}/device |\
			grep -q usb || printf "%s\n" ${disk}
	done
}
#--------------------------------------------------------------
parameter_u()
{
	local mydisk=$1
	readlink -f /sys/block/${mydisk}/device | \
		grep -q usb && printf "/dev/%s\n" ${mydisk}
}
#--------------------------------------------------------------

TEMP=$(getopt -o dhnpu: \
        --long disk,help,nousb,partition,usb: \
        -n  "$(basename ${0})" -- "${@}")

if [ "${?}" -ne 0 ]; then
	error 255 "getopt terminated abnormally"
	exit 255
fi

eval set -- "${TEMP}"

while true ; do
	case "${1}" in
		-d|--disk)
			PRINT_DISK=1
			shift
			;;
		-n|--nousb)
			PRINT_NOUSB=1
			shift
			;;
		-p|--partition)
			PRINT_PARTITION=1
			shift
			;;
		-u|--usb)
			PRINT_USB=1
			IS_USB_DISK="${2}"
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			error 255 "getopt internal error"
			exit 255
			;;
	esac
done

#--------------------------------------------------------------
if [ -n "${PRINT_DISK}" ]; then
    parameter_d
elif [ -n "${PRINT_NOUSB}" ]; then
    parameter_n
elif [ -n "${PRINT_PARTITION}" ]; then
    parameter_p
elif [ -n "${PRINT_USB}" ]; then
    parameter_u ${IS_USB_DISK}
else 
    usage
fi

